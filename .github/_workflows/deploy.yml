name: Build and Deploy
on:
  workflow_dispatch:
  push:
    branches:
      - main
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Create .env file (buildtime)
      #   run: |
      #     cat << EOF > .env
      #     SOME_SECRET_VALUE=${{ secrets.SOME_SECRET_VALUE }}
      #     SOME_NOT_SO_SECRET_VALUE=${{ vars.SOME_NOT_SO_SECRET_VALUE }}
      #     EOF

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose.yml
          sparse-checkout-cone-mode: false

      # - name: Create .env file (runtime)
      #   run: |
      #     cat << EOF > .env
      #     SOME_SECRET_VALUE=${{ secrets.SOME_SECRET_VALUE }}
      #     SOME_NOT_SO_SECRET_VALUE=${{ vars.SOME_NOT_SO_SECRET_VALUE }}
      #     EOF

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy with docker compose
        env:
          GITHUB_EVENT_REPOSITORY_NAME: ${{ github.event.repository.name }}
        run: |
          docker compose pull
          docker compose up -d

      - name: Verify container is running
        run: docker ps

      - name: Clean up old images
        run: docker image prune -af
